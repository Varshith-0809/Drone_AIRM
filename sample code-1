using System;
using System.Speech.Recognition;
using System.Speech.Synthesis;
using System.Threading.Tasks;
using Newtonsoft.Json.Linq;
using System.Net.Http;
using System.Xml.Linq;
using System.Threading;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        string openaiKey = ""; // replace with your OpenAI API key

        // Create an instance of the speech recognizer
        var recognizer = new SpeechRecognitionEngine();

        // Create an instance of the speech synthesizer
        var synth = new SpeechSynthesizer();

        // Create a grammar that only recognizes the word "Vironica"
        var grammar = new GrammarBuilder("Vironica");
        recognizer.LoadGrammar(new Grammar(grammar));

        // Set the input to the default audio device
        recognizer.SetInputToDefaultAudioDevice();

        // Start listening for speech input
        Console.WriteLine("Listening for 'Vironica' command...");
        while (true)
        {
            // Listen for speech input
            var result = recognizer.Recognize();

            if (result.Text == "Vironica")
            {
                // Speak the prompt to ask question
                synth.Speak("What is your question?");
                // Listen for question
                var question = recognizer.Recognize();
                if (question != null)
                {
                    Console.WriteLine("You said: " + question.Text);
                }
                else
                {
                    Console.WriteLine("Sorry, I didn't catch that. Please try again.");
                }

                // Send query to OpenAI API
                var client = new HttpClient();
                client.DefaultRequestHeaders.Add("Authorization", "Bearer " + openaiKey);
                CancellationTokenSource cancellationTokenSource = new CancellationTokenSource(TimeSpan.FromSeconds(10));

                // below one is the code after adding time delay constraint
                using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));


                try
                {
                    // Use the token from the CancellationTokenSource in the request
                    var response = await client.PostAsync("https://api.openai.com/v1/engines/davinci/completions",
                        new StringContent("{\"prompt\":\"" + question.Text + "\",\"engine\":\"davinci\",\"temperature\": 0.5,\"max_tokens\":2048,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0}",
                            System.Text.Encoding.UTF8,
                            "application/json"), cts.Token);
                    response.EnsureSuccessStatusCode();
                    var responseString = await response.Content.ReadAsStringAsync();
                    // Process responseString
                }
                catch (OperationCanceledException ex)
                {
                    // Handle timeout here
                    Console.WriteLine("Request timed out.");
                }
                catch (Exception ex)
                {
                    // Handle other exceptions here
                    Console.WriteLine(ex.Message);
                }

                //below one is the edited code to rectify the null constraint
                /*if (client != null)
                {
                    var response = await client.PostAsync("https://api.openai.com/v1/engines/davinci/completions", new StringContent("{\"prompt\":\"" + question.Text + "\",\"engine\":\"davinci\",\"temperature\": 0.5,\"max_tokens\":2048,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0}", System.Text.Encoding.UTF8, "application/json"));
                    var responseString = await response.Content.ReadAsStringAsync();
                    dynamic json = JObject.Parse(responseString);
                    Console.WriteLine("OpenAI response: " + json.choices[0].text);
                    // Speak the answer
                    synth.Speak(json.choices[0].text);// rest of your code here
                }
                else
                {
                    Console.WriteLine("Sorry, I didn't catch that. Please try again.");
                    // handle the null client object here
                }
                */

                //below one is the original code taken from github repo
                /*
                using (var response = await client.PostAsync("https://api.openai.com/v1/engines/davinci/completions", new StringContent("{\"prompt\":\"" + question.Text + "\",\"engine\":\"davinci\",\"temperature\": 0.5,\"max_tokens\":2048,\"top_p\":1,\"frequency_penalty\":0,\"presence_penalty\":0}",
                                                                                                                                System.Text.Encoding.UTF8,
                                                                                                                                "application/json")))
                {
                    var responseString = await response.Content.ReadAsStringAsync();
                    dynamic json = JObject.Parse(responseString);
                    Console.WriteLine("OpenAI response: " + json.choices[0].text);
                    // Speak the answer
                    synth.Speak(json.choices[0].text);
                }
                */
            }
        }
    }
}*/
